""" ENG 1P13 - Power In Community - Project 3

Program that converts sheet music/guitar chords into audio and display, making it easier for deafblind people to play the guitar.

Mon-52, Chaza Elfizy, Esme Pataracchia, Raadhikka Gupta, Matthew Guo, Nehil Seikh, McMaster University, March 3rd 2025. """

import math
import time
import random
import pygame
import json

from tkinter import *
from tkinter.font import Font
pygame.mixer.init()

#define the music list
music = []

dataFile = "song_database.json"
with open(dataFile, encoding="utf8") as f:
    json_data = json.load(f)
for i in range (len(json_data)):
    song = json_data[i]
    songName = song["song_name"]
    songArtist = song["singer"]
    song_display = f"{songName} - {songArtist}"
    music.append(song_display)

# global vars
playingCurr = False
currentSong = None
speed = 1.0

#functions
def select_song():
    root.withdraw()  
    secondpage.deiconify()

def go_back_2():
    secondpage.withdraw()
    root.deiconify()

def play_music():
    global currentSong, playingCurr
    
    secondpage.withdraw()
    thirdpage.deiconify()
    
    selected_song=music_list.curselection()
    selected_text=[music_list.get(i) for i in selected_song]
    music_name.config(text=f"{selected_text}")
    currentSong = selected_text[0]

    file = open("lastPlayedSong.txt", "w")
    file.write(currentSong.strip() + "\n")
    file.close()

def go_back_3():
    thirdpage.withdraw()
    secondpage.deiconify()

def last_played():
    try:
        file = open("lastPlayedSong.txt", "r")
        lastSong = file.read().strip()
        file.close()

        if lastSong: # exists
            music_name.config(text=lastSong)
            thirdpage.deiconify()
            secondpage.withdraw()
        else:
            print("No song found.")
    except FileNotFoundError:
        print("No data available.")

def play_stop():
    global playingCurr
    if playingCurr:
        pygame.mixer.music.pause()
        playingCurr = False
    else:
        pygame.mixer.music.unpause()
        playingCurr = True

def speed_up():
    global speed
    speed += 0.2 # can change.
    pygame.mixer.quit()
    pygame.mixer.init(frequency = int(44100 * speed))
    if playingCurr:
        pygame.mixer.music.play()

def speed_down():
    global speed
    speed = max(0.5, speed - 0.2) # allows for the min to not go below 0.5
    pygame.mixer.quit()
    pygame.mixer.init(frequency = int(44100 * speed))
    if playingCurr:
        pygame.mixer.music.play()

#set up command
root = Tk()
secondpage = Toplevel(root)
thirdpage = Toplevel(root)
thirdpage.withdraw()
secondpage.withdraw()

#set up font
default_font=Font(family="Times New Roman", size=40)
title_font=Font(family="Times New Roman", size=70)
chord_font=Font(family="Times New Roman", size=120)
emoji_font=Font(family="Times New Roman", size=70)

#set up the frame
homepage = Frame(root, bg="#ffffff")
homepage.pack(fill=BOTH, expand=True)
selectionframe = Frame(secondpage, bg="#ffffff")
selectionframe.pack(fill=BOTH, expand=True)
playingframe = Frame(thirdpage, bg="#ffffff")
playingframe.pack(fill=BOTH, expand=True)

second_frame=LabelFrame(selectionframe)
second_frame.grid(row=0, column=0, padx=20, pady=20) 
main_frame=LabelFrame(homepage)
main_frame.grid(row=1, column=1, padx=20, pady=20) 
third_frame=LabelFrame(playingframe)
third_frame.grid(row=0, column=0, padx=20, pady=20) 

#homepage defining
welcome_label=Label(homepage, text="Welcome to the app!", font=default_font, fg="white")
select_button=Button(homepage, text="select song", command=select_song, bg="yellow", width=25, height=3, font=default_font)
last_played_button=Button(homepage, text="last played song", command=last_played, bg="yellow", width=25, height=3, font=default_font)

#selection frame defining
music_list_var=StringVar()
music_list_var.set(music)
music_list=Listbox(selectionframe, listvariable=music_list_var, selectmode=SINGLE, width=25, height=6, font=default_font)

back_button_2=Button(selectionframe, text="go back", command=go_back_2, bg="yellow", width=25, height=3, font=default_font)
play_button=Button(selectionframe, text="▶️", command=play_music, bg="yellow", width=14, height=2, font=emoji_font)

#playing frame defining
music_name=Label(playingframe, text="music name", font=title_font, fg="black", bg="yellow")
play_music_button=Button(playingframe, text="▶️", command=play_music, bg="yellow", width=12, height=3, font=emoji_font)
stop_music_button=Button(playingframe, text="⏸️", command=play_music, bg="yellow", width=12, height=3, font=emoji_font)
back_button_3=Button(playingframe, text="back", command=go_back_3, bg="yellow", width=15, height=5, font=default_font)
chord=Label(playingframe, text="Em", font=chord_font)
speed_up_button=Button(playingframe, text= "⏫", command=speed_up, bg="yellow", width=12, height=3, font=emoji_font)
speed_down_button=Button(playingframe, text= "⏬", command=speed_down, bg="yellow", width=12, height=3, font=emoji_font)

#homepage gridding
welcome_label.grid(row=2, column=1, padx=100, pady=30, sticky=W)
select_button.grid(row=3, column=1, padx=100, pady=15, sticky=W)
last_played_button.grid(row=4, column=1, padx=100, pady=15, sticky=W)

#selection frame gridding
back_button_2.grid(row=4, column=1,padx=100, pady=15, sticky=W)
play_button.grid(row=3, column=1,padx=100, pady=15, sticky=W)
music_list.grid(row=1, column=1,padx=100, pady=30, sticky=W)

#playing frame gridding
music_name.grid(row=1, column=1, columnspan=3, sticky=W)
play_music_button.grid(row=2, column=1, padx=50, pady=50, sticky=W)
stop_music_button.grid(row=3, column=1, padx=50, pady=50, sticky=W)
back_button_3.grid(row=3, column=2, padx=30, sticky=W)
chord.grid(row=2, column=2, padx=100, sticky=W)
speed_up_button.grid(row=2, column=3, padx=30, pady=30, sticky=W)
speed_down_button.grid(row=3, column=3, padx=30, pady=30, sticky=W)

#set up command
root.mainloop()
secondpage.mainloop()
thirdpage.mainloop()
